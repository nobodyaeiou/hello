iris = pd.read_csv('Iris.csv')


X = iris.iloc[:, 1:5].values
feature_names = iris.columns[1:5].tolist()


model = AgglomerativeClustering(n_clusters=3, linkage='ward')
clusters = model.fit_predict(X)

print("Cluster assignments:", clusters)
linkage_matrix = linkage(X, method='ward')


dendrogram(linkage_matrix, labels=iris.iloc[:, 0].astype(str).values)  # Assuming the first column is the data point labels
plt.title('Dendrogram for Iris Dataset')
plt.xlabel('Data Point')
plt.ylabel('Euclidean Distance')
plt.show()


<---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->

dataset = pd.read_csv('Mall_Customers.csv')
X = dataset.iloc[:,[3,4]].values


from sklearn.cluster import KMeans
wcss =[]
for i in range (1,11):
    kmeans = KMeans(n_clusters = i, init = 'k-means++', max_iter =300, n_init = 10, random_state = 0)
    kmeans.fit(X)
    wcss.append(kmeans.inertia_)

plt.plot(range(1,11),wcss)
plt.title('The Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()


kmeans=KMeans(n_clusters= 5, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)
Y_Kmeans = kmeans.fit_predict(X)


plt.scatter(X[Y_Kmeans == 0, 0], X[Y_Kmeans == 0,1],s = 100, c='red', label = 'Cluster 1')
plt.scatter(X[Y_Kmeans == 1, 0], X[Y_Kmeans == 1,1],s = 100, c='blue', label = 'Cluster 2')
plt.scatter(X[Y_Kmeans == 2, 0], X[Y_Kmeans == 2,1],s = 100, c='green', label = 'Cluster 3')
plt.scatter(X[Y_Kmeans == 3, 0], X[Y_Kmeans == 3,1],s = 100, c='cyan', label = 'Cluster 4')
plt.scatter(X[Y_Kmeans == 4, 0], X[Y_Kmeans == 4,1],s = 100, c='magenta', label = 'Cluster 5')
plt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1], s = 300, c = 'yellow', label = 'Centroids')

plt.title('Clusters of clients')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending score (1-100)')
plt.legend()
plt.show()


from sklearn.metrics import silhouette_score
silhouette_avg = silhouette_score(X, Y_Kmeans)
print("Silhouette Score:", silhouette_avg)